package com.datn.datn.controller.user;

import java.math.BigDecimal;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.datn.datn.model.Category;
import com.datn.datn.model.Member;
import com.datn.datn.model.Product;
import com.datn.datn.model.ProductVariant;
import com.datn.datn.repository.CategoryRepository;
import com.datn.datn.service.CategoryService;
import com.datn.datn.service.ProductService;
import com.datn.datn.service.ProductVariantService;
import com.datn.datn.service.WishlistService;

import jakarta.servlet.http.HttpSession;

@RequestMapping("/products")
@Controller
public class ProductController {
    private final ProductVariantService productVariantService;
    private final CategoryService categoryService;
    // private final ProductService productService; // Th√™m service n√†y n·∫øu c·∫ßn
    private final WishlistService wishlistService;
    @Autowired
    private ProductService productService;

    @Autowired
    private CategoryRepository categoryRepository;

    public ProductController(ProductService productService,
            ProductVariantService productVariantService,
            CategoryService categoryService,
            WishlistService wishlistService) {
        this.productService = productService;
        this.productVariantService = productVariantService;
        this.categoryService = categoryService;
        this.wishlistService = wishlistService;
    }

    @GetMapping
    public String listProducts(
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "15") int size,
            @RequestParam(required = false) List<String> price,
            @RequestParam(required = false) List<String> type,
            @RequestParam(required = false) List<String> storage,
            @RequestParam(required = false) Boolean discounted,
            @RequestParam(required = false) String sort,
            @RequestParam(required = false) String keyword,
            Model model, HttpSession session,
            @ModelAttribute("message") String message) {

        List<ProductVariant> variants;

        if (Boolean.TRUE.equals(discounted)) { // Ki·ªÉm tra n·∫øu c√≥ l·ªçc theo gi·∫£m gi√°
            variants = productVariantService.findDiscountedVariants()
                    .stream()
                    .collect(Collectors.collectingAndThen(
                            Collectors.toMap(
                                    v -> v.getProduct().getProductID() + "-" +
                                            (v.getStorage() != null ? v.getStorage() : "no-storage"),
                                    v -> v,
                                    (v1, v2) -> v1),
                            map -> map.values().stream().collect(Collectors.toList())));
        } else {
            variants = productVariantService.findUniqueVariantsByProductAndStorage();
        }

        // Th√™m danh s√°ch danh m·ª•c v√†o model
        List<Category> allCategories = categoryService.getAll();
        model.addAttribute("allCategories", allCategories);

        // üßÆ L·ªçc theo lo·∫°i
        if (type != null && !type.isEmpty()) {
            System.out.println("ƒêang l·ªçc theo danh m·ª•c: " + type);

            variants = variants.stream()
                    .filter(v -> {
                        if (v.getProduct() == null || v.getProduct().getCategory() == null) {
                            System.out.println(
                                    "S·∫£n ph·∫©m " + (v.getProduct() != null ? v.getProduct().getProductName() : "null")
                                            + " kh√¥ng c√≥ category");
                            return false;
                        }

                        String dbCategoryName = v.getProduct().getCategory().getName().trim();
                        boolean match = type.stream()
                                .anyMatch(t -> t.trim().equalsIgnoreCase(dbCategoryName));

                        System.out.println("Ki·ªÉm tra: " + v.getProduct().getProductName()
                                + " - Category: " + dbCategoryName
                                + " - Match: " + match);

                        return match;
                    })
                    .collect(Collectors.toList());
        }

        // üíæ L·ªçc theo dung l∆∞·ª£ng
        if (storage != null && !storage.isEmpty()) {
            variants = variants.stream()
                    .filter(v -> v.getStorage() != null && storage.contains(v.getStorage()))
                    .collect(Collectors.toList());
        }

        // üí∞ L·ªçc theo gi√°
        if (price != null && !price.isEmpty()) {
            variants = variants.stream().filter(v -> {
                BigDecimal priceValue = v.getDiscountedPrice() != null ? v.getDiscountedPrice() : BigDecimal.ZERO;
                return price.stream().anyMatch(p -> {
                    switch (p) {
                        case "D∆∞·ªõi 5 tri·ªáu":
                            return priceValue.compareTo(BigDecimal.valueOf(5_000_000)) < 0;
                        case "5 - 10 tri·ªáu":
                            return priceValue.compareTo(BigDecimal.valueOf(5_000_000)) >= 0 &&
                                    priceValue.compareTo(BigDecimal.valueOf(10_000_000)) <= 0;
                        case "10 - 15 tri·ªáu":
                            return priceValue.compareTo(BigDecimal.valueOf(10_000_000)) > 0 &&
                                    priceValue.compareTo(BigDecimal.valueOf(15_000_000)) <= 0;
                        case "15 - 20 tri·ªáu":
                            return priceValue.compareTo(BigDecimal.valueOf(15_000_000)) > 0 &&
                                    priceValue.compareTo(BigDecimal.valueOf(20_000_000)) <= 0;
                        case "Tr√™n 20 tri·ªáu":
                            return priceValue.compareTo(BigDecimal.valueOf(20_000_000)) > 0;
                    }
                    return false;
                });
            }).collect(Collectors.toList());
        }

        // üîç L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm (t√™n s·∫£n ph·∫©m)
        if (keyword != null && !keyword.trim().isEmpty()) {
            String lowerKeyword = keyword.trim().toLowerCase(); // th√™m trim() ·ªü ƒë√¢y
            variants = variants.stream()
                    .filter(v -> v.getProduct().getProductName().toLowerCase().contains(lowerKeyword))
                    .collect(Collectors.toList());
        }

        // üß† Th√™m danh s√°ch wishlistIds n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
        Member user = (Member) session.getAttribute("loggedInUser");
        if (user != null) {
            Set<Integer> wishlistIds = wishlistService.getWishlistByUserId(user.getId())
                    .stream()
                    .map(ProductVariant::getVariantID)
                    .collect(Collectors.toSet());
            model.addAttribute("wishlistIds", wishlistIds);
        }

        // S·∫Øp x·∫øp
        if ("name_asc".equalsIgnoreCase(sort)) {
            variants.sort(Comparator.comparing(v -> v.getProduct().getProductName(), String.CASE_INSENSITIVE_ORDER));
        } else if ("name_desc".equalsIgnoreCase(sort)) {
            variants.sort(Comparator
                    .comparing((ProductVariant v) -> v.getProduct().getProductName(), String.CASE_INSENSITIVE_ORDER)
                    .reversed());
        } else if ("price_asc".equalsIgnoreCase(sort)) {
            variants.sort(Comparator.comparing(v -> {
                BigDecimal discountedPrice = v.getDiscountedPrice();
                return discountedPrice != null ? discountedPrice : BigDecimal.ZERO;
            }));
        } else if ("price_desc".equalsIgnoreCase(sort)) {
            variants.sort(Comparator.comparing((ProductVariant v) -> {
                BigDecimal discountedPrice = v.getDiscountedPrice();
                return discountedPrice != null ? discountedPrice : BigDecimal.ZERO;
            }).reversed());
        }

        // Ph√¢n trang
        int totalItems = variants.size();
        int totalPages = (int) Math.ceil((double) totalItems / size);
        int fromIndex = Math.min((page - 1) * size, totalItems);
        int toIndex = Math.min(fromIndex + size, totalItems);
        List<ProductVariant> pagedVariants = variants.subList(fromIndex, toIndex);

        model.addAttribute("selectedPrices", price);
        model.addAttribute("selectedTypes", type);
        model.addAttribute("selectedStorages", storage);
        model.addAttribute("products", pagedVariants);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", totalPages);
        model.addAttribute("sort", sort);
        model.addAttribute("isDiscounted", discounted != null ? discounted : false);
        model.addAttribute("keyword", keyword);

        if (message != null && !message.isEmpty()) {
            model.addAttribute("message", message); // th√™m v√†o model
        }
        List<Object[]> counts = productService.countProductsByCategory();
        Map<String, Long> categoryCounts = new HashMap<>();
        for (Object[] row : counts) {
            String categoryName = (String) row[0];
            Long count = (Long) row[1];
            categoryCounts.put(categoryName, count);
        }

        model.addAttribute("categoryCounts", categoryCounts);

        // T·∫°o URL g·ªëc gi·ªØ c√°c tham s·ªë l·ªçc hi·ªán t·∫°i
        StringBuilder baseUrl = new StringBuilder("/products?");
        if (sort != null)
            baseUrl.append("sort=").append(sort).append("&");
        if (discounted != null)
            baseUrl.append("discounted=").append(discounted).append("&");
        if (keyword != null && !keyword.isEmpty())
            baseUrl.append("keyword=").append(keyword).append("&");
        if (price != null)
            price.forEach(p -> baseUrl.append("price=").append(p).append("&"));
        if (type != null)
            type.forEach(t -> baseUrl.append("type=").append(t).append("&"));
        if (storage != null)
            storage.forEach(s -> baseUrl.append("storage=").append(s).append("&"));

        // X√≥a k√Ω t·ª± & cu·ªëi n·∫øu c√≥
        if (baseUrl.charAt(baseUrl.length() - 1) == '&') {
            baseUrl.deleteCharAt(baseUrl.length() - 1);
        }

        model.addAttribute("baseUrl", baseUrl.toString());

        // L·∫•y danh s√°ch category ƒë·ªÉ l·∫∑p ·ªü view
        model.addAttribute("categories", categoryRepository.findAll());
        return "views/user/products";
    }

    @GetMapping("/search-suggestions")
    @ResponseBody
    public List<String> getSearchSuggestions(@RequestParam("query") String query) {
        if (query == null || query.trim().isEmpty()) {
            return List.of(); // Kh√¥ng g·ª£i √Ω n·∫øu r·ªóng
        }

        String lowerQuery = query.toLowerCase();

        // L·∫•y t·∫•t c·∫£ productName ch·ª©a t·ª´ kh√≥a (gi·ªõi h·∫°n 10 g·ª£i √Ω)
        return productService.getAll().stream()
                .map(Product::getProductName)
                .filter(name -> name != null && name.toLowerCase().contains(lowerQuery))
                .distinct()
                .limit(10)
                .collect(Collectors.toList());
    }

}
