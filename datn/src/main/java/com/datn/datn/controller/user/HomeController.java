package com.datn.datn.controller.user;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.datn.datn.model.Member;
import com.datn.datn.model.ProductVariant;
import com.datn.datn.repository.MemberRepository;
import com.datn.datn.service.EmailService;
import com.datn.datn.service.MembersService;
import com.datn.datn.service.ProductVariantService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@Controller
public class HomeController {
    private final ProductVariantService productVariantService;
    @Autowired
    private MembersService memberService;
    @Autowired
    private EmailService emailService;
    @Autowired
    private MemberRepository memberRepository;

    public HomeController(ProductVariantService productVariantService) {
        this.productVariantService = productVariantService;
    }

    @GetMapping("/")
    public String redirectToHome() {
        return "redirect:/home";
    }

    @GetMapping("/home")
    public String home(Model model, HttpSession session,
            @ModelAttribute("loginSuccess") String loginSuccess) {

        // G√°n th√¥ng b√°o ƒëƒÉng nh·∫≠p (n·∫øu c√≥) t·ª´ flash attribute
        if (loginSuccess != null && !loginSuccess.isEmpty()) {
            model.addAttribute("loginSuccess", loginSuccess);
        }

        // G√°n th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v√†o model
        Object loggedInUser = session.getAttribute("loggedInUser");
        model.addAttribute("loggedInUser", loggedInUser);

        // L·∫•y danh s√°ch s·∫£n ph·∫©m duy nh·∫•t theo productId + storage
        List<ProductVariant> allVariants = productVariantService.findUniqueVariantsByProductAndStorage();

        // Gi·ªõi h·∫°n l·∫•y 10 s·∫£n ph·∫©m
        List<ProductVariant> limitedVariants = allVariants.stream()
                .limit(10)
                .collect(Collectors.toList());

        model.addAttribute("products", limitedVariants);

        return "views/user/trangchu";
    }

    @GetMapping("/login")
    public String login(Model model, HttpSession session) {
        return "views/shared/login";
    }

    @PostMapping("/login")
    public String login(
            @RequestParam String input,
            @RequestParam String password,
            HttpSession session,
            RedirectAttributes redirectAttributes,
            Model model) {

        Optional<Member> optional = memberRepository.loginByPhoneOrEmail(input, password);

        if (optional.isPresent()) {
            Member member = optional.get();
            session.setAttribute("loggedInUser", member);
            // üëâ Ki·ªÉm tra xem t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
            if (!member.isActive()) {
                model.addAttribute("error", "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
                return "views/shared/login";
            }
            session.setAttribute("loggedInUser", member);

            switch (member.getRole()) {
                case "ADMIN":
                    return "redirect:/admin/employees";
                case "STAFF":
                    return "redirect:/admin-products";
                case "CUSTOMER":
                    // ƒê·∫∑t c·ªù hi·ªÉn th·ªã th√¥ng b√°o v√†o Session
                    session.setAttribute("showLoginSuccess", true);
                    return "redirect:/"; // Redirect v·ªÅ trang ch·ªß (kh√¥ng tr·∫£ view tr·ª±c ti·∫øp)
                default:
                    model.addAttribute("error", "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c vai tr√≤");
                    return "views/shared/login";
            }
        } else {
            model.addAttribute("error", "Sai email/s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u");
            return "views/shared/login";
        }
    }

    @PostMapping("/clear-login-message")
    @ResponseBody
    public String clearLoginMessage(HttpSession session) {
        session.removeAttribute("showLoginSuccess"); // X√≥a c·ªù hi·ªÉn th·ªã
        return "OK"; // Kh√¥ng c·∫ßn tr·∫£ v·ªÅ g√¨ ƒë·∫∑c bi·ªát
    }

    @GetMapping("/logout")
    public String logout(HttpSession session, RedirectAttributes redirectAttributes) {
        session.invalidate(); // H·ªßy to√†n b·ªô session
        redirectAttributes.addFlashAttribute("logoutSuccess", "B·∫°n ƒë√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!");
        return "redirect:/login";
    }

    @GetMapping("/register")
    public String register(Model model, HttpSession session) {
        model.addAttribute("member", new Member());
        return "views/shared/register";
    }

    @PostMapping("/register")
    public String register(
            @Valid @ModelAttribute("member") Member member,
            BindingResult result,
            RedirectAttributes redirectAttributes,
            Model model) {

        if (!member.getPassword().equals(member.getConfirmPassword())) {
            result.rejectValue("confirmPassword", "error.confirmPassword", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
        }

        if (memberRepository.existsByEmail(member.getEmail())) {
            result.rejectValue("email", "error.email", "Email ƒë√£ t·ªìn t·∫°i");
        }

        if (memberRepository.existsByPhone(member.getPhone())) {
            result.rejectValue("phone", "error.phone", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i");
        }

        if (result.hasErrors()) {
            model.addAttribute("member", member);
            return "views/shared/register";
        }

        // ‚úÖ G√°n m·∫∑c ƒë·ªãnh quy·ªÅn kh√°ch h√†ng
        member.setRole("CUSTOMER");

        memberRepository.save(member);
        redirectAttributes.addFlashAttribute("success", "ƒêƒÉng k√Ω th√†nh c√¥ng!");
        return "redirect:/login";
    }

    @GetMapping("/forgetPass")
    public String forgetPass(Model model, HttpSession session) {
        return "views/shared/forgetPass";
    }

    @PostMapping("/forgetPass")
    public String processForgetPass(
            @RequestParam("email") String email,
            RedirectAttributes redirectAttributes) {

        Member member = memberService.findByEmail(email);
        if (member == null) {
            redirectAttributes.addFlashAttribute("message", "Email kh√¥ng t·ªìn t·∫°i!");
            return "redirect:/forgetPass";
        }

        String newPassword = UUID.randomUUID().toString().substring(0, 8);
        member.setPassword(newPassword); // ‚ö† B·∫°n n√™n m√£ h√≥a n·∫øu ƒëang d√πng BCrypt!

        memberService.save(member); // ƒê√£ s·ª≠a l·∫°i t√™n ƒë√∫ng

        // In ra console (ch·ªâ ƒë·ªÉ test)
        System.out.println("M·∫≠t kh·∫©u m·ªõi c·ªßa " + email + " l√†: " + newPassword);

        // G·ª≠i email (n·∫øu c√≥ service email)
        emailService.sendNewPassword(email, newPassword);

        redirectAttributes.addFlashAttribute("message", "M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!");
        return "redirect:/forgetPass";
    }

    @GetMapping("/info")
    public String showInfo(Model model, HttpSession session) {
        Member member = (Member) session.getAttribute("loggedInUser"); // ‚úÖ S·ª≠a ·ªü ƒë√¢y
        if (member == null) {
            return "redirect:/login";
        }
        // T·∫°o chu·ªói ****** theo ƒë·ªô d√†i m·∫≠t kh·∫©u
        String maskedPassword = "*".repeat(member.getPassword().length());
        model.addAttribute("member", member);
        model.addAttribute("maskedPassword", maskedPassword); // Truy·ªÅn chu·ªói ·∫©n m·∫≠t kh·∫©u
        model.addAttribute("member", member);
        return "views/shared/info";
    }

    @GetMapping("/detail")
    public String detail(Model model, HttpSession session) {
        return "views/user/products-detail";
    }

    @GetMapping("/introduction")
    public String introduction(Model model, HttpSession session) {
        return "views/user/introduction";
    }

    @GetMapping("/cart")
    public String cart(Model model, HttpSession session) {
        return "views/user/cart";
    }

    @GetMapping("/checkout")
    public String checkout(Model model, HttpSession session) {
        return "views/user/checkout";
    }

    @GetMapping("/order")
    public String order(Model model, HttpSession session) {
        return "views/user/order";
    }

    @GetMapping("/order-detail")
    public String orderDetail(Model model, HttpSession session) {
        return "views/user/orderDetail";
    }

    @GetMapping("/guarantee")
    public String guarantee(Model model, HttpSession session) {
        return "views/user/baohanh";
    }

    @GetMapping("/formGuarantee")
    public String formGuarantee(Model model, HttpSession session) {
        return "views/user/tracuu-baohanh";
    }

    @GetMapping("/editInf")
    public String editInf(Model model, HttpSession session) {
        Member member = (Member) session.getAttribute("loggedInUser");

        if (member == null) {
            return "redirect:/login";
        }

        model.addAttribute("member", member);
        return "views/shared/editInf";
    }

    @PostMapping("/editInf")
    public String updateMemberInfo(HttpServletRequest request, HttpSession session, Model model) {
        Member currentUser = (Member) session.getAttribute("loggedInUser"); // ‚úÖ L·∫•y ƒë√∫ng session

        if (currentUser == null) {
            return "redirect:/login"; // Ph√≤ng tr∆∞·ªùng h·ª£p b·ªã null
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ form
        String fullname = request.getParameter("fullname");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String birthdayStr = request.getParameter("birthday");

        String currentPassword = request.getParameter("current-password");
        String newPassword = request.getParameter("new-password");
        String confirmPassword = request.getParameter("confirm-password");

        // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
        currentUser.setFullname(fullname);
        currentUser.setEmail(email);
        currentUser.setPhone(phone);
        if (birthdayStr != null && !birthdayStr.isBlank()) {
            currentUser.setBirthday(LocalDate.parse(birthdayStr));
        }

        // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u n·∫øu c√≥
        if (currentPassword != null && !currentPassword.isBlank()) {
            if (!currentPassword.equals(currentUser.getPassword())) {
                model.addAttribute("error", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng");
                model.addAttribute("member", currentUser);
                return "views/shared/editInf";
            }

            if (newPassword == null || newPassword.isBlank()) {
                model.addAttribute("error", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi");
                model.addAttribute("member", currentUser);
                return "views/shared/editInf";
            }

            if (!newPassword.equals(confirmPassword)) {
                model.addAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
                model.addAttribute("member", currentUser);
                return "views/shared/editInf";
            }

            currentUser.setPassword(newPassword); // N·∫øu c√≥ BCrypt th√¨ m√£ h√≥a ·ªü ƒë√¢y
        }

        // L∆∞u thay ƒë·ªïi
        memberService.save(currentUser);
        session.setAttribute("loggedInUser", currentUser); // ‚úÖ C·∫≠p nh·∫≠t l·∫°i session

        model.addAttribute("success", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng");
        model.addAttribute("member", currentUser);
        return "views/shared/editInf"; // ‚úÖ Load l·∫°i trang
    }

    @GetMapping("/address")
    public String address(Model model, HttpSession session) {
        return "views/shared/address";
    }
}
