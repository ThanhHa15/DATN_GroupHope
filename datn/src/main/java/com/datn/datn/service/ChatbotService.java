package com.datn.datn.service;

import com.datn.datn.model.Product;
import com.datn.datn.model.ProductVariant;
import com.datn.datn.repository.ProductRepository;
import com.datn.datn.repository.ProductVariantRepository;

import org.apache.commons.text.similarity.JaroWinklerSimilarity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.text.Normalizer;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ChatbotService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private ProductVariantRepository productVariantRepository;

    public ChatbotResponse handleCustomerQuery(String query) {
        String normalizedQuery = normalizeQuery(query);

        // üîç T√¨m ki·∫øm fuzzy
        List<Product> matches = findFuzzyMatches(normalizedQuery);
        if (!matches.isEmpty()) {
            return createProductResponse(matches.get(0)); // c√≥ th·ªÉ tr·∫£ nhi·ªÅu k·∫øt qu·∫£ n·∫øu mu·ªën
        }

        // üí¨ Ki·ªÉm tra c√°c c√¢u h·ªèi th√¥ng th∆∞·ªùng
        String defaultResponse = getDefaultResponse(query);
        if (defaultResponse != null) {
            return new ChatbotResponse(false, defaultResponse, null, null);
        }

        // ‚ùå Kh√¥ng t√¨m th·∫•y
        return new ChatbotResponse(
                false,
                "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi '" + query + "'. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ r√µ h∆°n kh√¥ng?",
                null,
                null);
    }

    private String normalizeQuery(String query) {
        return removeAccents(query.toLowerCase())
                .replaceAll("[^a-z0-9\\s]", "")
                .replaceAll("\\s+", " ")
                .trim();
    }

    // H√†m b·ªè d·∫•u ti·∫øng Vi·ªát
    private String removeAccents(String text) {
        return Normalizer.normalize(text, Normalizer.Form.NFD)
                .replaceAll("\\p{M}", "");
    }

    // T√¨m ki·∫øm g·∫ßn ƒë√∫ng (fuzzy search)
    private List<Product> findFuzzyMatches(String query) {
        JaroWinklerSimilarity jw = new JaroWinklerSimilarity();

        return productRepository.findAll().stream()
                .filter(p -> {
                    String name = removeAccents(p.getProductName().toLowerCase());
                    // N·∫øu ch·ª©a tr·ª±c ti·∫øp
                    if (name.contains(query) || query.contains(name)) {
                        return true;
                    }
                    // N·∫øu ƒë·ªô t∆∞∆°ng ƒë·ªìng >= 0.6
                    return jw.apply(query, name) >= 0.6;
                })
                // S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·∫£m d·∫ßn
                .sorted((p1, p2) -> {
                    double s1 = jw.apply(query, removeAccents(p1.getProductName().toLowerCase()));
                    double s2 = jw.apply(query, removeAccents(p2.getProductName().toLowerCase()));
                    return Double.compare(s2, s1);
                })
                .collect(Collectors.toList());
    }

    // service/ChatbotService.java
    private ChatbotResponse createProductResponse(Product product) {
        List<ProductVariant> variants = productVariantRepository.findByProduct(product);
        String message = variants.isEmpty()
                ? "T√¨m th·∫•y s·∫£n ph·∫©m '" + product.getProductName() + "' nh∆∞ng hi·ªán kh√¥ng c√≥ phi√™n b·∫£n n√†o c√≥ s·∫µn."
                : "ƒê√¢y l√† c√°c phi√™n b·∫£n c√≥ s·∫µn cho '" + product.getProductName() + "':";

        // ‚ö° Tr·∫£ v·ªÅ product nh∆∞ng ƒë·∫£m b·∫£o imageUrl ch·ªâ l√† t√™n file
        if (product.getImageUrl() != null) {
            String raw = product.getImageUrl().trim();
            // Lo·∫°i b·ªè prefix n·∫øu c√≥ (images/, uploads/, /path/...)
            raw = raw.replaceAll("^(images/|uploads/)+", "");
            product.setImageUrl(raw);
        }

        return new ChatbotResponse(true, message, product, variants);
    }

    private String getDefaultResponse(String query) {
        String normalized = normalizeQuery(query);

        if (normalized.matches("(hello|hi|ch√†o|xin ch√†o).*")) {
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Apple HOPEPHONE . T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?";
        }

        if (normalized.matches(".*(c·∫£m ∆°n|thanks|thank you).*")) {
            return "Kh√¥ng c√≥ g√¨! N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin g√¨, c·ª© h·ªèi t√¥i nh√©!";
        }

        if (normalized.matches(".*(gi√°|price|cost|bao nhi√™u).*")) {
            return "Vui l√≤ng cho t√¥i bi·∫øt t√™n s·∫£n ph·∫©m c·ª• th·ªÉ b·∫°n mu·ªën h·ªèi gi√°.";
        }

        return null;
    }

    public static class ChatbotResponse {
        private boolean hasMatch;
        private String message;
        private Product product;
        private List<ProductVariant> variants;

        public ChatbotResponse(boolean hasMatch, String message, Product product, List<ProductVariant> variants) {
            this.hasMatch = hasMatch;
            this.message = message;
            this.product = product;
            this.variants = variants;
        }

        public boolean isHasMatch() {
            return hasMatch;
        }

        public String getMessage() {
            return message;
        }

        public Product getProduct() {
            return product;
        }

        public List<ProductVariant> getVariants() {
            return variants;
        }
    }
}